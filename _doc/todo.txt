TODO:
    - core features
        - parser
            - change name from attribution to assignment
            - lowercase of variable name must be different than lowercase of:
                - python keyword list: http://stackoverflow.com/questions/14595922/list-of-python-keywords
                - qbl keyword list: 'qstate', 'gate', 'circuit', 'input', 'step', 'qubit', 'bit', 'measure', 'all'
            - valid variables
                - if has set
                - if has expected type
                - if any of parents has the same variable name like children
                - if there are no recursion in set variables
            - set data to variables in qbl_memory
            - split assignment and expression
                - valid expression
                    - check returned type
                - valid assignment
        - qbl_memory
            - set qclib built-in variables
                - at beginning
                - after remove all
                - (qclib built-in variables may be cover up by user variables)
        - simulator
            - project
                - structure of classes
                - how to join measures with step expressions to create one object to represent step
                  in QubitLab Simulator (read qclib documentation)
            - build circuit
            - run simulation
            - get final state
            - get given step state
        - informer
        - diagram
        - parser
            - "import <filename>" command
            - doc comments '##'

    - new features
        - generate LaTeX diagrams
        - loops
        - auto swap-gates
        - new objects (gates, math elements, etc)
        - ...

    - improvement
        - references to the same values of variables in qbl_memory
        - using grammar in parser (for example https://pyparsing.wikispaces.com/)

    - refactoring
        - move help methods to separate class from actions
        - reduce number of parameters in functions
            - pack parameters into dict or object
            - remove parameters from constructors and create set-methods
        - don't use parameters that will be modify in methods
        - separate question-methods and function-methods
        - separate try-catch block to individual method (no code before and after try-catch block;
          inside try-block only one method)
        - instead of long switch (or if-else) block use polymorphism and object factory design pattern
